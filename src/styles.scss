@use "@angular/material" as mat;
@import "@angular/material/theming";
@import "./styles/fonts.scss";

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  box-sizing: border-box;
}
html,
body {
  max-height: 100%;
  height: 100%;
  min-height: 0;
  overflow: hidden;
}
body {
  margin: 0;
  font-family: "Inter", ui-sans-serif, system-ui, -apple-system,
    BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans",
    sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
    "Noto Color Emoji";
}

.mat-form-field-no-padding {
  .mat-form-field-wrapper {
    padding-bottom: 0 !important;
  }
}
.mat-chip-list-centered {
  .mat-chip-list-wrapper {
    justify-content: center;
  }
}

// -----------------------------------------------------------------------------------------------------
// @ Typography
// -----------------------------------------------------------------------------------------------------

// Angular Material typography
$typography: mat.define-typography-config(
  $font-family:
    "Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'",
  $title: mat.define-typography-level(20px, 32px, 600),
  $body-2: mat.define-typography-level(14px, 24px, 600),
  $button: mat.define-typography-level(14px, 14px, 600),
  $input: mat.define-typography-level(16px, 1.125, 400),
);

// Setup the typography
@include mat.all-component-typographies($typography);

$primary-palette: (
  50: theme("colors.sky.50"),
  100: theme("colors.sky.100"),
  200: theme("colors.sky.200"),
  300: theme("colors.sky.300"),
  400: theme("colors.sky.400"),
  500: theme("colors.sky.500"),
  600: theme("colors.sky.600"),
  700: theme("colors.sky.700"),
  800: theme("colors.sky.800"),
  900: theme("colors.sky.900"),
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);

$secondary-palette: (
  50: theme("colors.orange.50"),
  100: theme("colors.orange.100"),
  200: theme("colors.orange.200"),
  300: theme("colors.orange.300"),
  400: theme("colors.orange.400"),
  500: theme("colors.orange.500"),
  600: theme("colors.orange.600"),
  700: theme("colors.orange.700"),
  800: theme("colors.orange.800"),
  900: theme("colors.orange.900"),
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: rgba(black, 0.87),
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);

$warn-palette: (
  50: theme("colors.red.50"),
  100: theme("colors.red.100"),
  200: theme("colors.red.200"),
  300: theme("colors.red.300"),
  400: theme("colors.red.400"),
  500: theme("colors.red.500"),
  600: theme("colors.red.600"),
  700: theme("colors.red.700"),
  800: theme("colors.red.800"),
  900: theme("colors.red.900"),
  contrast: (
    50: rgba(black, 0.87),
    100: rgba(black, 0.87),
    200: rgba(black, 0.87),
    300: rgba(black, 0.87),
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);

$my-primary: mat.define-palette($primary-palette, 500);
$my-accent: mat.define-palette($secondary-palette, 500);
$my-warn: mat.define-palette($warn-palette, 500);

// The "warn" palette is optional and defaults to red if not specified.

$my-theme: mat.define-light-theme(
  (
    color: (
      primary: $my-primary,
      accent: $my-accent,
      warn: $my-warn,
    ),
  )
);

@include mat.all-component-themes($my-theme);
